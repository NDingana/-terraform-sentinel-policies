
# The tfplan/v2 import provides access to a Terraform plan.
# The data in the tfplan/v2 import is sourced from the JSON configuration file 
# that is generated by the terraform show -json command. 
import "tfplan/v2" as tfplan


######################################################################################################
############################# filter your plan #######################################################
######################################################################################################

# use the filter function to filter 

# Change Representation
# Certain collections in this import contain a change representation, 
# an object with details about changes to a particular entity, 
# such as a resource (within the resource_changes collection), 
# or output (within the output_changes collection).
s3_buckets = filter tfplan.resource_changes as _, rc {

  rc.type is "aws_s3_bucket" and
  (rc.change.actions contains "create" or rc.change.actions is ["update"])
}


######################################################################################################
############### Define the conditions you want to check against the filtered plan #########################
######################################################################################################

# These will be the minimum tags our S3 bucket should have
required_tags = [
    "Terraform",
    "Environment",
]


# It should have only "public-read" on the S3 bucket since its a static website
allowed_acls = [
    "public-read",
]


######################################################################################################
######################### Write the rules to check the conditions defined above ######################
######################################################################################################

# instances.change.after.tags in "tfplan/v2"  is a map.
# create alias for our array created above required_tags as rt

# return true if the map instances.change.after.tag contains the elements in rt (required_tags array above)
# for all the S3 buckets created, return true if required_tags array in "tfplan/v2" contains
# the elements in the required_tags array created here above
bucket_tags = rule {
    all s3_buckets as _, instances {
        all required_tags as rt {
        instances.change.after.tags contains rt
        }
    }
}

# buckets.change.after in "tfplan/v2"  is a map.
#  and buckets.change.after.acl is a key where the key is "acl"
# so we need to write logic to match key= "acl" to value ="public-read"

# for all the S3 buckets created, return true if there is an exact match 
# buckets.change.after.acl == "public-read"
acl_allowed = rule {
    all s3_buckets as _, buckets {
    buckets.change.after.acl in allowed_acls
    }
}

######################################################################################################
######################### apply the rules above in the main rule #####################################
######################################################################################################

# Every Sentinel policy must have a main rule. 
# This is the rule that is evaluated to determine the result of a policy.
main = rule {
    # Both rules must return true else it returns false
    (bucket_tags and acl_allowed) else false
}
